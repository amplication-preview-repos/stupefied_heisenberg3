/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SearchAnalyticsService } from "../searchAnalytics.service";
import { SearchAnalyticsCreateInput } from "./SearchAnalyticsCreateInput";
import { SearchAnalytics } from "./SearchAnalytics";
import { SearchAnalyticsFindManyArgs } from "./SearchAnalyticsFindManyArgs";
import { SearchAnalyticsWhereUniqueInput } from "./SearchAnalyticsWhereUniqueInput";
import { SearchAnalyticsUpdateInput } from "./SearchAnalyticsUpdateInput";

export class SearchAnalyticsControllerBase {
  constructor(protected readonly service: SearchAnalyticsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SearchAnalytics })
  async createSearchAnalytics(
    @common.Body() data: SearchAnalyticsCreateInput
  ): Promise<SearchAnalytics> {
    return await this.service.createSearchAnalytics({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SearchAnalytics] })
  @ApiNestedQuery(SearchAnalyticsFindManyArgs)
  async searchAnalyticsItems(
    @common.Req() request: Request
  ): Promise<SearchAnalytics[]> {
    const args = plainToClass(SearchAnalyticsFindManyArgs, request.query);
    return this.service.searchAnalyticsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SearchAnalytics })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async searchAnalytics(
    @common.Param() params: SearchAnalyticsWhereUniqueInput
  ): Promise<SearchAnalytics | null> {
    const result = await this.service.searchAnalytics({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SearchAnalytics })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSearchAnalytics(
    @common.Param() params: SearchAnalyticsWhereUniqueInput,
    @common.Body() data: SearchAnalyticsUpdateInput
  ): Promise<SearchAnalytics | null> {
    try {
      return await this.service.updateSearchAnalytics({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SearchAnalytics })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSearchAnalytics(
    @common.Param() params: SearchAnalyticsWhereUniqueInput
  ): Promise<SearchAnalytics | null> {
    try {
      return await this.service.deleteSearchAnalytics({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
