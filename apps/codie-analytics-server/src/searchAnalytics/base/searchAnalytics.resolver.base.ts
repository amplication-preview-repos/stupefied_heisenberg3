/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SearchAnalytics } from "./SearchAnalytics";
import { SearchAnalyticsCountArgs } from "./SearchAnalyticsCountArgs";
import { SearchAnalyticsFindManyArgs } from "./SearchAnalyticsFindManyArgs";
import { SearchAnalyticsFindUniqueArgs } from "./SearchAnalyticsFindUniqueArgs";
import { DeleteSearchAnalyticsArgs } from "./DeleteSearchAnalyticsArgs";
import { SearchAnalyticsService } from "../searchAnalytics.service";
@graphql.Resolver(() => SearchAnalytics)
export class SearchAnalyticsResolverBase {
  constructor(protected readonly service: SearchAnalyticsService) {}

  async _searchAnalyticsItemsMeta(
    @graphql.Args() args: SearchAnalyticsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SearchAnalytics])
  async searchAnalyticsItems(
    @graphql.Args() args: SearchAnalyticsFindManyArgs
  ): Promise<SearchAnalytics[]> {
    return this.service.searchAnalyticsItems(args);
  }

  @graphql.Query(() => SearchAnalytics, { nullable: true })
  async searchAnalytics(
    @graphql.Args() args: SearchAnalyticsFindUniqueArgs
  ): Promise<SearchAnalytics | null> {
    const result = await this.service.searchAnalytics(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SearchAnalytics)
  async deleteSearchAnalytics(
    @graphql.Args() args: DeleteSearchAnalyticsArgs
  ): Promise<SearchAnalytics | null> {
    try {
      return await this.service.deleteSearchAnalytics(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
