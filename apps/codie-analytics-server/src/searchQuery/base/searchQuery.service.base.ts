/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, SearchQuery as PrismaSearchQuery } from "@prisma/client";

export class SearchQueryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SearchQueryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.searchQuery.count(args);
  }

  async searchQueries<T extends Prisma.SearchQueryFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SearchQueryFindManyArgs>
  ): Promise<PrismaSearchQuery[]> {
    return this.prisma.searchQuery.findMany<Prisma.SearchQueryFindManyArgs>(
      args
    );
  }
  async searchQuery<T extends Prisma.SearchQueryFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SearchQueryFindUniqueArgs>
  ): Promise<PrismaSearchQuery | null> {
    return this.prisma.searchQuery.findUnique(args);
  }
  async createSearchQuery<T extends Prisma.SearchQueryCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SearchQueryCreateArgs>
  ): Promise<PrismaSearchQuery> {
    return this.prisma.searchQuery.create<T>(args);
  }
  async updateSearchQuery<T extends Prisma.SearchQueryUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SearchQueryUpdateArgs>
  ): Promise<PrismaSearchQuery> {
    return this.prisma.searchQuery.update<T>(args);
  }
  async deleteSearchQuery<T extends Prisma.SearchQueryDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SearchQueryDeleteArgs>
  ): Promise<PrismaSearchQuery> {
    return this.prisma.searchQuery.delete(args);
  }
}
